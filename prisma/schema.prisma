generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// 사용자
model User {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  avatarUrl String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  projects      Project[]             @relation("ProjectOwner")
  versions      Version[]
  contributions ProjectContributors[]
}

// 프로젝트 
model Project {
  id          Int      @id @default(autoincrement())
  name        String
  description String
  githubUrl   String
  domain      String   @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  owner   User @relation("ProjectOwner", fields: [ownerId], references: [id])
  ownerId Int

  contributors ProjectContributors[]
  versions     Version[]

  // 프로젝트의 기본 Helm values 
  defaultHelmValues Json?
}

// 프로젝트 기여자 
model ProjectContributors {
  id        Int     @id @default(autoincrement())
  user      User    @relation(fields: [userId], references: [id])
  userId    Int
  project   Project @relation(fields: [projectId], references: [id])
  projectId Int

  @@unique([userId, projectId])
}

//  버전 
model Version {
  id              Int     @id @default(autoincrement())
  name            String
  description     String
  isCurrent       Boolean @default(false)
  imageTag        String
  branch          String
  commitHash      String
  applicationName String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // 상태 필드
  codeStatus    StepStatus    @default(none)
  buildStatus   StepStatus    @default(none)
  imageStatus   StepStatus    @default(none)
  approveStatus ApproveStatus @default(none)
  deployStatus  StepStatus    @default(none)
  flowStatus    FlowStatus    @default(none)

  helmValues   HelmValues? @relation(name: "VersionHelmRelation", fields: [helmValuesId], references: [id])
  helmValuesId Int?        @unique

  // Project 연결
  project   Project @relation(fields: [projectId], references: [id])
  projectId Int

  // 작성자
  author   User @relation(fields: [authorId], references: [id])
  authorId Int

  codeAnalysis CodeAnalysis? @relation("CodeAnalysisForVersion")

  @@unique([projectId, name])
}

model HelmValues {
  id        Int      @id @default(autoincrement())
  content   Json
  createdAt DateTime @default(now())

  version Version? @relation(name: "VersionHelmRelation")
}

// 코드 정적 분석
model CodeAnalysis {
  id        Int      @id @default(autoincrement())
  versionId Int      @unique
  errorLog  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  version Version     @relation("CodeAnalysisForVersion", fields: [versionId], references: [id])
  issues  CodeIssue[]
}

model CodeIssue {
  id             Int     @id @default(autoincrement())
  codeAnalysisId Int
  ruleId         String
  message        String
  severity       String?
  filePath       String
  line           Int
  column         Int?

  codeAnalysis CodeAnalysis @relation(fields: [codeAnalysisId], references: [id])
}

// ==================== enum ====================
enum StepStatus {
  none
  pending
  success
  fail
}

enum ApproveStatus {
  none
  pending
  approved
  rejected
}

enum FlowStatus {
  none
  pending
  success
  fail
}
