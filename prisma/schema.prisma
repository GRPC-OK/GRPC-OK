generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int                   @id @default(autoincrement())
  name          String
  email         String                @unique
  avatarUrl     String
  createdAt     DateTime              @default(now())
  updatedAt     DateTime              @updatedAt
  projects      Project[]             @relation("ProjectOwner")
  contributions ProjectContributors[]
  versions      Version[]
}

model Project {
  id                Int                   @id @default(autoincrement())
  name              String                @unique
  description       String?
  githubUrl         String
  domain            String                @unique
  createdAt         DateTime              @default(now())
  updatedAt         DateTime              @updatedAt
  ownerId           Int?
  defaultHelmValues Json?
  owner             User?                  @relation("ProjectOwner", fields: [ownerId], references: [id])
  contributors      ProjectContributors[]
  versions          Version[]
}

model ProjectContributors {
  id        Int     @id @default(autoincrement())
  userId    Int
  projectId Int
  project   Project @relation(fields: [projectId], references: [id])
  user      User    @relation(fields: [userId], references: [id])

  @@unique([userId, projectId])
}

model Version {
  id              Int           @id @default(autoincrement())
  name            String
  description     String
  isCurrent       Boolean       @default(false)
  imageTag        String
  branch          String
  commitHash      String
  applicationName String
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  codeStatus      StepStatus    @default(none)
  buildStatus     StepStatus    @default(none)
  imageStatus     StepStatus    @default(none)
  deployStatus    StepStatus    @default(none)
  approveStatus   ApproveStatus @default(none)
  flowStatus      FlowStatus    @default(none)
  helmValuesId    Int?          @unique
  projectId       Int
  authorId        Int
  codeAnalysis    CodeAnalysis? @relation("CodeAnalysisForVersion")
  codeIssues      CodeIssue[]
  author          User          @relation(fields: [authorId], references: [id])
  helmValues      HelmValues?   @relation("VersionHelmRelation", fields: [helmValuesId], references: [id])
  project         Project       @relation(fields: [projectId], references: [id])

  @@unique([projectId, name])
}

model HelmValues {
  id        Int      @id @default(autoincrement())
  content   Json
  createdAt DateTime @default(now())
  version   Version? @relation("VersionHelmRelation")
}

model CodeAnalysis {
  id        Int            @id @default(autoincrement())
  versionId Int            @unique
  errorLog  String?
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  hasIssue  Boolean
  status    AnalysisStatus
  version   Version        @relation("CodeAnalysisForVersion", fields: [versionId], references: [id])
  issues    CodeIssue[]
}

model CodeIssue {
  id             Int          @id @default(autoincrement())
  codeAnalysisId Int
  ruleId         String
  message        String
  severity       String?
  filePath       String
  line           Int
  column         Int?
  versionId      Int
  cve            String?
  cwe            String?
  codeAnalysis   CodeAnalysis @relation(fields: [codeAnalysisId], references: [id], onDelete: Cascade)
  version        Version      @relation(fields: [versionId], references: [id])

  @@index([versionId])
  @@index([codeAnalysisId])
}

model sunwoo{
  id Int @id @default(autoincrement())
  name String
}

enum StepStatus {
  none
  pending
  success
  fail
}

enum ApproveStatus {
  none
  pending
  approved
  rejected
}

enum FlowStatus {
  none
  pending
  success
  fail
}

enum AnalysisStatus {
  pending
  success
  fail
}