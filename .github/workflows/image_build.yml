name: Run Image Build

on:
  workflow_dispatch:
    inputs:
      versionName:
        required: true
      repo:
        required: true
      ref:
        required: true

jobs:
  image-build:
    runs-on: ubuntu-latest

    steps:
      # 1. 레포지토리 클론
      - name: Clone target repository
        env:
          GH_TOKEN: ${{ secrets.PLATFORM_GITHUB_TOKEN }}
        run: |
          # 입력받은 ref(branch/tag)로 타겟 레포지토리를 클론
            git clone --branch ${{ github.event.inputs.ref }} \
            https://$GH_TOKEN@github.com/${{ github.event.inputs.repo }} target-repo
      # 2. Docker Buildx 셋업
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3 # 멀티플랫폼 빌드를 위한 Buildx 환경 구성

      # 2-1. Docker Hub 로그인 (AWS 로그인 대신 Docker Hub 로그인 추가)
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      # 3. 이미지 빌드 및 Docker Hub 푸시 (ECR 관련 부분 변경)
      - name: Build and Push Docker image to Docker Hub
        id: build-push
        run: |
          cd target-repo
          # Docker Hub 레포지토리 이름은 DOCKERHUB_USERNAME/my-app 형식을 따름
          DOCKERHUB_REPOSITORY_NAME="${{ secrets.DOCKERHUB_USERNAME }}/my-app" # [변경] ECR 대신 Docker Hub 레포지토리 이름 사용
          IMAGE_URI="$DOCKERHUB_REPOSITORY_NAME:${{ github.event.inputs.versionName }}" # [변경] ECR 레지스트리 정보 대신 Docker Hub 이미지 URI 사용
          
          # Docker 이미지 빌드
          if docker build -t "$IMAGE_URI" .; then
            # Docker Hub에 푸시
            if docker push "$IMAGE_URI"; then
              # [변경] latest 태그도 함께 푸시
              docker tag "$IMAGE_URI" "$DOCKERHUB_REPOSITORY_NAME:latest"
              docker push "$DOCKERHUB_REPOSITORY_NAME:latest"
              echo "status=success" >> $GITHUB_OUTPUT
            else
              echo "status=fail" >> $GITHUB_OUTPUT
            fi
          else
            echo "status=fail" >> $GITHUB_OUTPUT
          fi

      # 4. 빌드 결과를 백엔드로 전송
      - name: Upload result to backend
        run: |
          # 빌드 성공/실패 결과를 고정된 callbackUrl로 POST 요청하여 알림
          CALLBACK_URL="http://3.35.153.146:3000/api/image-build/result"
          if [ "${{ steps.build-push.outputs.status }}" = "success" ]; then
            curl -X POST "$CALLBACK_URL?versionName=${{ github.event.inputs.versionName }}&status=success"
          else
            curl -X POST "$CALLBACK_URL?versionName=${{ github.event.inputs.versionName }}&status=fail"
          fi