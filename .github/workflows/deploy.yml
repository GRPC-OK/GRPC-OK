name: Deploy to ArgoCD

on:
  workflow_dispatch:
    inputs:
      versionId:
        required: true
        type: string
      projectName:
        required: true
        type: string
      imageTag:
        required: true
        type: string
      domain:
        required: true
        type: string

jobs:
  deploy-to-argocd:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout ArgoCD Apps Repository
        uses: actions/checkout@v4
        with:
          repository: GRPC-OK/argocd-apps
          token: ${{ secrets.INTELLISIA_GITHUB_TOKEN }}
          path: argocd-apps

      - name: Create or Update Helm Values
        run: |
          PROJECT_DIR="argocd-apps/helm-projects/${{ inputs.projectName }}"
          
          # 프로젝트 디렉터리가 없으면 생성
          mkdir -p "$PROJECT_DIR"
          
          # values.yaml 생성/업데이트
          cat > "$PROJECT_DIR/values.yaml" << EOF
          replicaCount: 1
          image:
            repository: "seaproject/my-app"
            tag: "${{ inputs.imageTag }}"
            pullPolicy: IfNotPresent
          host: "${{ inputs.domain }}"
          port: 3000
          resources:
            requests:
              cpu: "100m"
              memory: "128Mi"
            limits:
              cpu: "200m"
              memory: "256Mi"
          EOF

      - name: Commit and Push Changes
        run: |
          cd argocd-apps
          git config user.name "Intellisia Deploy Bot"
          git config user.email "deploy-bot@intellisia.com"
          
          git add helm-projects/${{ inputs.projectName }}/values.yaml
          git commit -m "Deploy ${{ inputs.projectName }} version ${{ inputs.imageTag }}"
          git push origin main

      - name: Update Deployment Status
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            STATUS="success"
          else
            STATUS="fail"
          fi
          
          curl -X POST "${{ secrets.ENV }}/api/deployment/callback?versionId=${{ inputs.versionId }}&status=$STATUS"