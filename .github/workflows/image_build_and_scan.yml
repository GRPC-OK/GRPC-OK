name: Run Image Build and Scan

on:
  workflow_dispatch:
    inputs:
      versionId:
        required: true
      repo:
        required: true
      ref:
        required: true
      baseUrl:
        required: true  

jobs:
  image-build-and-scan:
    runs-on: ubuntu-latest

    steps:
      - name: Clone target repository
        env:
          GH_TOKEN: ${{ secrets.INTELLISIA_GITHUB_TOKEN }}
        run: |
          git clone --branch ${{ github.event.inputs.ref }} \
            https://$GH_TOKEN@github.com/${{ github.event.inputs.repo }} target-repo

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        id: build-local
        run: |
          cd target-repo
          LOCAL_IMAGE_TAG="local-my-app:${{ github.event.inputs.versionId }}"
          if docker build -t "$LOCAL_IMAGE_TAG" .; then
            echo "status=success" >> $GITHUB_OUTPUT
            echo "local_image_tag=$LOCAL_IMAGE_TAG" >> $GITHUB_OUTPUT
          else
            echo "status=fail" >> $GITHUB_OUTPUT
          fi

      - name: Run Trivy vulnerability scan and generate SARIF
        if: success() && steps.build-local.outputs.status == 'success'
        id: trivy_scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ steps.build-local.outputs.local_image_tag }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Login to Docker Hub
        if: success() && steps.build-local.outputs.status == 'success'
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Push Docker image to Docker Hub
        if: success() && steps.trivy_scan.outcome == 'success'
        id: push-to-hub
        run: |
          LOCAL_IMAGE_TAG="${{ steps.build-local.outputs.local_image_tag }}"
          DOCKERHUB_REPOSITORY_NAME="${{ secrets.DOCKERHUB_USERNAME }}/my-app"
          DOCKERHUB_IMAGE_URI="$DOCKERHUB_REPOSITORY_NAME:${{ github.event.inputs.versionId }}"
          docker tag "$LOCAL_IMAGE_TAG" "$DOCKERHUB_IMAGE_URI"
          if docker push "$DOCKERHUB_IMAGE_URI"; then
            docker tag "$DOCKERHUB_IMAGE_URI" "$DOCKERHUB_REPOSITORY_NAME:latest"
            docker push "$DOCKERHUB_REPOSITORY_NAME:latest"
            echo "status=success" >> $GITHUB_OUTPUT
            echo "image_tag=$DOCKERHUB_IMAGE_URI" >> $GITHUB_OUTPUT
          else
            echo "status=fail" >> $GITHUB_OUTPUT
          fi

      - name: Upload Build Result to Backend
        if: always()
        run: |
          CALLBACK_URL="${{ github.event.inputs.baseUrl }}/api/versions/${{ github.event.inputs.versionId }}/image-build/callback_build"
          IMAGE_TAG="${{ steps.push-to-hub.outputs.image_tag }}"
          if [ "${{ steps.build-local.outputs.status }}" = "success" ]; then
            curl -X POST "$CALLBACK_URL?versionId=${{ github.event.inputs.versionId }}&status=success&imageTag=$IMAGE_TAG"
          else
            curl -X POST "$CALLBACK_URL?versionId=${{ github.event.inputs.versionId }}&status=fail"
          fi

      - name: Configure AWS Credentials
        if: always()
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Upload Trivy Results to S3 and Notify Backend
        if: always()
        run: |
          BUCKET="${{ secrets.S3_BUCKET_NAME }}"
          REGION="${{ secrets.AWS_REGION }}"
          IMAGE_ANALYSIS_CALLBACK_URL="${{ github.event.inputs.baseUrl }}/api/versions/${{ github.event.inputs.versionId }}/image-analysis/callback_analysis"

          SCAN_STATUS="fail"
          TRIVY_FILE="trivy-results.sarif"
          TARGET_PATH="image-analysis/version-${{ github.event.inputs.versionId }}/$TRIVY_FILE"
          PUBLIC_URL=""

          if [ -f "$TRIVY_FILE" ]; then
            aws s3 cp "$TRIVY_FILE" "s3://$BUCKET/$TARGET_PATH"
            PUBLIC_URL="https://$BUCKET.s3.$REGION.amazonaws.com/$TARGET_PATH"
            echo "Uploaded Trivy report: $PUBLIC_URL"
            SCAN_STATUS="success"
          else
            echo "Trivy results file not found, assuming scan failure."
            SCAN_STATUS="fail"
          fi

          curl -X POST "$IMAGE_ANALYSIS_CALLBACK_URL" \
            -H "Content-Type: application/json" \
            -d '{
              "versionId": '${{ github.event.inputs.versionId }},
              "status": "'$SCAN_STATUS'",
              "fileUrl": "'$PUBLIC_URL'"
            }'
